#!/bin/bash

# Script to fix large file issues with Git repository

echo "Fixing large file issues in Goose AI repository..."

# Change to the goose-ai directory
cd /home/scott/goose-ai

# First, let's update the .gitignore file to ensure all large directories are excluded
cat > .gitignore << 'EOF'
# Run scripts
run_cli.sh
tokenizer_files/
.DS_Store
.idea
*.log
tmp/

# Generated by Cargo
# will have compiled files and executables
debug/
target/

# These are backup files generated by rustfmt
**/*.rs.bk

# MSVC Windows builds of rustc generate these, which store debugging information
*.pdb

# UI
./ui/desktop/node_modules
./ui/desktop/out

# Hermit
/.hermit/
/bin/

debug_*.txt

# Docs
# Dependencies
/node_modules

# Production
/build

# Generated files
.docusaurus
.cache-loader

# Benchmark paths
benchmark-*

# Large data directories - CRITICAL TO EXCLUDE
/goose_data/
/ollama_data/
**/*.bin
**/*.gguf
**/*.onnx
**/*.safetensors
**/*.pt
**/*.pth
**/*.tf
**/*.tar
**/*.tar.gz
**/*.zip
**/*.model
**/*.weights
**/node_modules/
**/target/

# Personal credentials or tokens
.env
*.token

# Backup files
*.bak
EOF

# Unstage all changes
git reset

# Remove any large files from git cache
echo "Cleaning git cache of large files..."
git gc --prune=now

# Add only the files we want to track
echo "Adding tracked files..."
git add .gitignore
git add scripts/local/
git add README.md
git add CONTRIBUTING.md 
git add LICENSE

# Create a clean commit
echo "Creating a clean commit..."
git commit -m "Clean backup with excluded large files"

echo "Changes committed. Now use 'git push -f origin main' to force push these changes."
echo "WARNING: This will overwrite your GitHub repository history!"

read -p "Do you want to force push now? (y/n): " choice
if [ "$choice" = "y" ]; then
  echo "Force pushing changes..."
  git push -f origin main
  echo "Push complete! Check your repository at https://github.com/realDGK/goose"
else
  echo "You can manually push later with: git push -f origin main"
fi
